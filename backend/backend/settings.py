"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = []


# Application definition

from .local_settings import (
    EXTRA_APPS,
    ENABLE_CORS_HEADERS,
    ENABLE_DJANGO_TOOLBAR,
)  # noqa

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "admin_reorder",
    "rest_framework",
    "drf_yasg",
    "nested_admin",
    "coreapp",
] + EXTRA_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "admin_reorder.middleware.ModelAdminReorder",
]

ADMIN_REORDER = (
    {
        "app": "coreapp",
        "label": "Mindfeeder Core",
        "models": (
            "coreapp.Source",
            "coreapp.SourceType",
            "coreapp.SourceTag",
            "coreapp.DChan",
            "coreapp.Item",
            "coreapp.ItemWeekTopic",
        ),
    },
    {"app": "coreapp", "label": "Basic Stats", "models": (
        "coreapp.VTableCountsTotals",
        "coreapp.VItemsCreatedByHourLast24",
        "coreapp.VItemsCreatedByDayLast7",
        "coreapp.VArticlesCreatedByHourLast24",
        "coreapp.VArticlesCreatedByDayLast7",
    )},
    {"app": "auth", "models": ("coreapp.User", "auth.Group", "auth.Permission")},
)

if ENABLE_CORS_HEADERS:
    INSTALLED_APPS.append("corsheaders")
    MIDDLEWARE.insert(0, "corsheaders.middleware.CorsMiddleware")

if ENABLE_DJANGO_TOOLBAR:
    INSTALLED_APPS.append("debug_toolbar")
    MIDDLEWARE.append("debug_toolbar.middleware.DebugToolbarMiddleware"),

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    },
    # 'default': {
    #     'ENGINE': 'django.db.backends.postgresql',
    #     'NAME': 'giftfisher',
    #     'USER': 'postgres',
    #     'PASSWORD': 'Ur@n!um824',
    #     'HOST': 'localhost'
    # }
}


# Custom user mode
# https://docs.djangoproject.com/en/2.0/topics/auth/customizing/#substituting-a-custom-user-model
AUTH_USER_MODEL = "coreapp.User"

AUTHENTICATION_BACKENDS = ["coreapp.auth.CustomModelBackend"]


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

# this is where `manage.py collectstatic` copies static files to
STATIC_ROOT = os.path.join(BASE_DIR, "static_web_root")

MEDIA_URL = "/media/"

MEDIA_ROOT = os.path.join(BASE_DIR, "media")


# REST framework
#
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10000,
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
}

# django-import-export
IMPORT_EXPORT_TMP_STORAGE_CLASS = "interactions.helpers.Utf8TempFolderStorage"

# Channels
# ASGI_APPLICATION = "project.routing.application"
# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         'CONFIG': {
#             "hosts": [('127.0.0.1', 6379)],
#         },
#     },
# }

# DATABASE_ROUTERS = ["coreapp.db_routers.CoreDBRouter"]


from .local_settings import *  # noqa
